/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package samples.trading.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TradeEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2523669237574015394L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradeEvent\",\"namespace\":\"samples.trading.avro\",\"fields\":[{\"name\":\"TICKER\",\"type\":\"string\"},{\"name\":\"EVENT_TIME\",\"type\":\"string\"},{\"name\":\"PRICE\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TradeEvent> ENCODER =
      new BinaryMessageEncoder<TradeEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TradeEvent> DECODER =
      new BinaryMessageDecoder<TradeEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TradeEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TradeEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TradeEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TradeEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TradeEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TradeEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TradeEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TradeEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence TICKER;
  private java.lang.CharSequence EVENT_TIME;
  private double PRICE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TradeEvent() {}

  /**
   * All-args constructor.
   * @param TICKER The new value for TICKER
   * @param EVENT_TIME The new value for EVENT_TIME
   * @param PRICE The new value for PRICE
   */
  public TradeEvent(java.lang.CharSequence TICKER, java.lang.CharSequence EVENT_TIME, java.lang.Double PRICE) {
    this.TICKER = TICKER;
    this.EVENT_TIME = EVENT_TIME;
    this.PRICE = PRICE;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TICKER;
    case 1: return EVENT_TIME;
    case 2: return PRICE;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TICKER = (java.lang.CharSequence)value$; break;
    case 1: EVENT_TIME = (java.lang.CharSequence)value$; break;
    case 2: PRICE = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TICKER' field.
   * @return The value of the 'TICKER' field.
   */
  public java.lang.CharSequence getTICKER() {
    return TICKER;
  }


  /**
   * Sets the value of the 'TICKER' field.
   * @param value the value to set.
   */
  public void setTICKER(java.lang.CharSequence value) {
    this.TICKER = value;
  }

  /**
   * Gets the value of the 'EVENT_TIME' field.
   * @return The value of the 'EVENT_TIME' field.
   */
  public java.lang.CharSequence getEVENTTIME() {
    return EVENT_TIME;
  }


  /**
   * Sets the value of the 'EVENT_TIME' field.
   * @param value the value to set.
   */
  public void setEVENTTIME(java.lang.CharSequence value) {
    this.EVENT_TIME = value;
  }

  /**
   * Gets the value of the 'PRICE' field.
   * @return The value of the 'PRICE' field.
   */
  public double getPRICE() {
    return PRICE;
  }


  /**
   * Sets the value of the 'PRICE' field.
   * @param value the value to set.
   */
  public void setPRICE(double value) {
    this.PRICE = value;
  }

  /**
   * Creates a new TradeEvent RecordBuilder.
   * @return A new TradeEvent RecordBuilder
   */
  public static samples.trading.avro.TradeEvent.Builder newBuilder() {
    return new samples.trading.avro.TradeEvent.Builder();
  }

  /**
   * Creates a new TradeEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradeEvent RecordBuilder
   */
  public static samples.trading.avro.TradeEvent.Builder newBuilder(samples.trading.avro.TradeEvent.Builder other) {
    if (other == null) {
      return new samples.trading.avro.TradeEvent.Builder();
    } else {
      return new samples.trading.avro.TradeEvent.Builder(other);
    }
  }

  /**
   * Creates a new TradeEvent RecordBuilder by copying an existing TradeEvent instance.
   * @param other The existing instance to copy.
   * @return A new TradeEvent RecordBuilder
   */
  public static samples.trading.avro.TradeEvent.Builder newBuilder(samples.trading.avro.TradeEvent other) {
    if (other == null) {
      return new samples.trading.avro.TradeEvent.Builder();
    } else {
      return new samples.trading.avro.TradeEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TradeEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradeEvent>
    implements org.apache.avro.data.RecordBuilder<TradeEvent> {

    private java.lang.CharSequence TICKER;
    private java.lang.CharSequence EVENT_TIME;
    private double PRICE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(samples.trading.avro.TradeEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TICKER)) {
        this.TICKER = data().deepCopy(fields()[0].schema(), other.TICKER);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.EVENT_TIME)) {
        this.EVENT_TIME = data().deepCopy(fields()[1].schema(), other.EVENT_TIME);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.PRICE)) {
        this.PRICE = data().deepCopy(fields()[2].schema(), other.PRICE);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing TradeEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(samples.trading.avro.TradeEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.TICKER)) {
        this.TICKER = data().deepCopy(fields()[0].schema(), other.TICKER);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EVENT_TIME)) {
        this.EVENT_TIME = data().deepCopy(fields()[1].schema(), other.EVENT_TIME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PRICE)) {
        this.PRICE = data().deepCopy(fields()[2].schema(), other.PRICE);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'TICKER' field.
      * @return The value.
      */
    public java.lang.CharSequence getTICKER() {
      return TICKER;
    }


    /**
      * Sets the value of the 'TICKER' field.
      * @param value The value of 'TICKER'.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder setTICKER(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.TICKER = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TICKER' field has been set.
      * @return True if the 'TICKER' field has been set, false otherwise.
      */
    public boolean hasTICKER() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TICKER' field.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder clearTICKER() {
      TICKER = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EVENT_TIME' field.
      * @return The value.
      */
    public java.lang.CharSequence getEVENTTIME() {
      return EVENT_TIME;
    }


    /**
      * Sets the value of the 'EVENT_TIME' field.
      * @param value The value of 'EVENT_TIME'.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder setEVENTTIME(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.EVENT_TIME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EVENT_TIME' field has been set.
      * @return True if the 'EVENT_TIME' field has been set, false otherwise.
      */
    public boolean hasEVENTTIME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EVENT_TIME' field.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder clearEVENTTIME() {
      EVENT_TIME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'PRICE' field.
      * @return The value.
      */
    public double getPRICE() {
      return PRICE;
    }


    /**
      * Sets the value of the 'PRICE' field.
      * @param value The value of 'PRICE'.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder setPRICE(double value) {
      validate(fields()[2], value);
      this.PRICE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'PRICE' field has been set.
      * @return True if the 'PRICE' field has been set, false otherwise.
      */
    public boolean hasPRICE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'PRICE' field.
      * @return This builder.
      */
    public samples.trading.avro.TradeEvent.Builder clearPRICE() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TradeEvent build() {
      try {
        TradeEvent record = new TradeEvent();
        record.TICKER = fieldSetFlags()[0] ? this.TICKER : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.EVENT_TIME = fieldSetFlags()[1] ? this.EVENT_TIME : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.PRICE = fieldSetFlags()[2] ? this.PRICE : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TradeEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TradeEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TradeEvent>
    READER$ = (org.apache.avro.io.DatumReader<TradeEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.TICKER);

    out.writeString(this.EVENT_TIME);

    out.writeDouble(this.PRICE);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.TICKER = in.readString(this.TICKER instanceof Utf8 ? (Utf8)this.TICKER : null);

      this.EVENT_TIME = in.readString(this.EVENT_TIME instanceof Utf8 ? (Utf8)this.EVENT_TIME : null);

      this.PRICE = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.TICKER = in.readString(this.TICKER instanceof Utf8 ? (Utf8)this.TICKER : null);
          break;

        case 1:
          this.EVENT_TIME = in.readString(this.EVENT_TIME instanceof Utf8 ? (Utf8)this.EVENT_TIME : null);
          break;

        case 2:
          this.PRICE = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










